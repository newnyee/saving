name: deploy 
 
on: 
  push: 
    branches: [ "main" ]
 
jobs: 
  deploy: 
    name: server ci-cd 
    runs-on: ubuntu-latest 
 
    steps: 
      - name: Checkout 
        uses: actions/checkout@v3 
 
      - name: Set up JDK 17 
        uses: actions/setup-java@v3 
        with: 
          java-version: '17' 
          distribution: 'temurin' 
 
      - name: Build 
        run: ./gradlew build -x test 
 
      - name: Test 
        #run: ./gradlew asciidoctor 
        run: echo 'empty test' 
 
      - name: Login to Docker Hub 
        uses: docker/login-action@v1 
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }} 
 
      - name: Jib 
        env: 
          DOCKERHUB_REPOSITORY_PATH: ${{ secrets.DOCKERHUB_REPOSITORY_PATH }} 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
        run: ./gradlew jib -x test 
          -Djib.to.image=$DOCKERHUB_REPOSITORY_PATH 
          -Djib.to.tags=latest 
          -Djib.container.creationTime=USE_CURRENT_TIMESTAMP 
          -Djib.container.environment=SLACK_WEB_HOOK_URL=$SLACK_WEBHOOK_URL 
          -Djib.container.jvmFlags=-XX:MaxRAMPercentage=30.0,-XX:MinRAMPercentage=30.0,-Duser.timezone=Asia/Seoul,-Dspring.profiles.active=dev 
 
      - name: Get Github action IP 
        id: ip 
        uses: haythem/public-ip@v1.2 
 
      - name: Add Github Actions IP to Security group 
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
        run: | 
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_Security_Group_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32 
 
      - name: user service deploy 
        uses: appleboy/ssh-action@master 
        env: 
          DOCKERHUB_REPOSITORY_PATH: ${{ secrets.DOCKERHUB_REPOSITORY_PATH }} 
        with: 
          host: ${{ secrets.REMOTE_IP }} 
          username: ${{ secrets.REMOTE_EC2_NAME }} 
          key: ${{ secrets.REMOTE_SSH_KEY }} 
          script: | 
            cd ~/app 
            sudo docker-compose down --rmi all 
            sudo docker-compose up -d 
          #여기에 서비스가 떴는지 확인하는 validate 스크립트가 추가 
 
      - name: Remove Github Actions IP from security group 
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
        run: | 
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_Security_Group_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32 > /dev/null 
        if: always() 
 
      - name: Slack notification 
        uses: 8398a7/action-slack@v3 
        with: 
          username: github action 
          status: ${{ job.status }} 
          author_name: Github Action 
          fields: repo,message,commit # repo,message,commit,author,action,eventName,ref,workflow,job,took 
        env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
        if: always()
